// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Process = require("process");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

function stringOfBullteType(bt) {
  switch (bt) {
    case /* Question */0 :
        return "Question";
    case /* Todo */1 :
        return "Todo";
    case /* Item */2 :
        return "Item";
    
  }
}

var Bullet = {
  stringOfBullteType: stringOfBullteType
};

var cmp = Caml_obj.caml_compare;

var BulletCompare = Belt_Id.MakeComparable({
      cmp: cmp
    });

function bulletOfString(str) {
  var value = str.substr(3);
  var indicator = str.substring(0, 2);
  switch (indicator) {
    case ".-" :
        return {
                bulletType: /* Item */2,
                value: value
              };
    case ".>" :
        return {
                bulletType: /* Todo */1,
                value: value
              };
    case ".?" :
        return {
                bulletType: /* Question */0,
                value: value
              };
    default:
      return ;
  }
}

function bulletReducer(accumulatedMap, item) {
  var n = Belt_Map.getWithDefault(accumulatedMap, item.bulletType, "");
  return Belt_Map.set(accumulatedMap, item.bulletType, n + ("* " + (item.value + "\n")));
}

function notesReducer(accumulatedString, cmp, item) {
  return accumulatedString + ("## " + (stringOfBullteType(cmp) + ("\n\n" + (item + "\n"))));
}

function processNotes(inNotes, outNotes) {
  var fileContents = Fs.readFileSync(inNotes, "utf8");
  var lines = fileContents.split("\n");
  var __x = Belt_Array.map(lines, bulletOfString);
  var __x$1 = Belt_List.fromArray(Belt_Array.keepMap(__x, (function (bullet) {
              return bullet;
            })));
  var notes = Belt_Map.reduce(Belt_List.reduce(__x$1, Belt_Map.make(BulletCompare), bulletReducer), "", notesReducer);
  Fs.writeFileSync(outNotes, "# Notes\n\n" + notes, "utf8");
  
}

var nodeArg = Belt_Array.get(Process.argv, 0);

var progArg = Belt_Array.get(Process.argv, 1);

var inFileArg = Belt_Array.get(Process.argv, 2);

var outFileArg = Belt_Array.get(Process.argv, 3);

var exit = 0;

if (inFileArg !== undefined && outFileArg !== undefined) {
  processNotes(inFileArg, outFileArg);
} else {
  exit = 1;
}

if (exit === 1) {
  if (nodeArg !== undefined && progArg !== undefined) {
    console.log("Usage: " + (nodeArg + (" " + (progArg + " inputNote.md outputNote.md"))));
  } else {
    console.log("Error");
  }
}

exports.Bullet = Bullet;
exports.BulletCompare = BulletCompare;
exports.bulletOfString = bulletOfString;
exports.bulletReducer = bulletReducer;
exports.notesReducer = notesReducer;
exports.processNotes = processNotes;
exports.nodeArg = nodeArg;
exports.progArg = progArg;
exports.inFileArg = inFileArg;
exports.outFileArg = outFileArg;
/* BulletCompare Not a pure module */
